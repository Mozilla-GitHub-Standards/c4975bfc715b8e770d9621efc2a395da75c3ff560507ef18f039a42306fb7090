
# DNS Records the the important entry-points in the stack. 
# Each entry embeds the shared DNSPrefix parameter, to allow multiple deploys.
#
#    logs.<prefix>.lcip.org:     log collection server
#
# Servers for each individual project are currently maintained direct from
# the project repo using e.g. awsbox.

DNSRecords:
  Type: AWS::Route53::RecordSetGroup
  Properties:
    HostedZoneName: "lcip.org."
    RecordSets:
      - Name: {"Fn::Join": [".", ["logs", {"Ref": "DNSPrefix"}, "lcip.org."]]}
        Type: CNAME
        TTL: "30"
        ResourceRecords:
          - {"Fn::GetAtt": ["LogServer", "PublicDnsName"]}
      - Name: {"Fn::Join": [".", ["token", {"Ref": "DNSPrefix"}, "lcip.org."]]}
        Type: CNAME
        TTL: "30"
        ResourceRecords:
          - {"Fn::GetAtt": ["TokenServer", "PublicDnsName"]}
      - Name: {"Fn::Join": [".", ["sync1", {"Ref": "DNSPrefix"}, "lcip.org."]]}
        Type: CNAME
        TTL: "30"
        ResourceRecords:
          - {"Fn::GetAtt": ["SyncServer1", "PublicDnsName"]}
      - Name: {"Fn::Join": [".", ["sync2", {"Ref": "DNSPrefix"}, "lcip.org."]]}
        Type: CNAME
        TTL: "30"
        ResourceRecords:
          - {"Fn::GetAtt": ["SyncServer2", "PublicDnsName"]}


# The log-collecting server, and associated infra.
# It's just a stand-alone box.

LogServer:
  Type: AWS::EC2::Instance
  Properties:
    InstanceType: m1.medium
    ImageId: { "Ref": "LogBoxAMI" }
    KeyName: { "Ref": "AWSBoxDeployKey" }
    SecurityGroups:
      - {"Ref": "LogServerSecurityGroup"}
    BlockDeviceMappings:
      - DeviceName: "/dev/sdb"
        VirtualName: "ephemeral0"
    Tags:
      - Key: "Name"
        Value: "fxa-logbox"
      - Key: "Type"
        Value: "logbox"
      - Key: "App"
        Value: "fxa"
      - Key: "Env"
        Value: "dev"
      - Key: "Owner"
        Value: "rfkelly"
      - Key: "Stack"
        Value: {"Ref": "AWS::StackName"}
    UserData: {"Fn::Base64": {"Fn::Join": ["", [
      "#!/bin/bash\n",
      "set -e -x\n",
      # Mount ephemeral storage onto /var/data, preserving frozen contents.
      "tar -cjvf /tmp/datadir.tar.bz2 /var/data\n",
      "mount /dev/sdb /var/data\n",
      "tar -xjvf /tmp/datadir.tar.bz2 -C /\n",
      "rm /tmp/datadir.tar.bz2\n",
      # Execute local startup after cloudinit has run.
      "mv /etc/rc.local.post-cloudinit /etc/rc.local\n",
      "exec /etc/rc.local\n",
       ]]}}


LogServerSecurityGroup:
  Type: AWS::EC2::SecurityGroup
  Properties:
    GroupDescription: "awsboxen security group for log-collecting server"
    SecurityGroupIngress:
      - IpProtocol: "tcp"
        FromPort: "22"
        ToPort: "22"
        CidrIp: "0.0.0.0/0"
      # Allow inbound web traffic from anywhere.
      - IpProtocol: "tcp"
        FromPort: "80"
        ToPort: "80"
        CidrIp: "0.0.0.0/0"
      - IpProtocol: "tcp"
        FromPort: "443"
        ToPort: "443"
        CidrIp: "0.0.0.0/0"
      # Allow ElasticSearch access, for the  kibana web interface.
      - IpProtocol: "tcp"
        FromPort: "9200"
        ToPort: "9200"
        CidrIp: "0.0.0.0/0"
      # Allow access to heka web dashboard.
      - IpProtocol: "tcp"
        FromPort: "4352"
        ToPort: "4352"
        CidrIp: "0.0.0.0/0"
      # Allow inbound heka logs from awsbox security group.
      - IpProtocol: "tcp"
        FromPort: "5672"
        ToPort: "5672"
        SourceSecurityGroupName: "awsbox group v1"


# A single stand-along EC2 instance for the tokenserver.

TokenServer:
  Type: AWS::EC2::Instance
  Properties:
    InstanceType: m1.small
    ImageId: {"Ref": "TokenServerBoxAMI"}
    KeyName: {"Ref": "AWSBoxDeployKey"}
    SecurityGroups:
      - {"Ref": "TokenSecurityGroup"}
    Tags:
      - Key: "Name"
        Value: "fxa-tokenserver"
      - Key: "Type"
        Value: "tokenserver"
      - Key: "App"
        Value: "fxa"
      - Key: "Env"
        Value: "dev"
      - Key: "Owner"
        Value: "rfkelly"
      - Key: "Stack"
        Value: {"Ref": "AWS::StackName"}
    UserData: {"Fn::Base64": {"Fn::Join": ["", [
      "#!/bin/bash\n",
      "set -e -x\n",
      # Execute local startup after cloudinit has run.
      "mv /etc/rc.local.post-cloudinit /etc/rc.local\n",
      "exec /etc/rc.local\n",
       ]]}}

TokenSecurityGroup:
  Type: AWS::EC2::SecurityGroup
  Properties:
    GroupDescription:  awsboxen security group for picl-oldsync tokenserver
    SecurityGroupIngress:
      # Allow ssh from anywhere
      - IpProtocol: "tcp"
        FromPort: "22"
        ToPort: "22"
        CidrIp: "0.0.0.0/0"
      # Allow http access from anywhere
      - IpProtocol: "tcp"
        FromPort: "443"
        ToPort: "443"
        CidrIp: "0.0.0.0/0"


# Two stand-alone EC2 instances to be storage nodes.

SyncServer1:
  Type: AWS::EC2::Instance
  Properties:
    InstanceType: m1.small
    ImageId: {"Ref": "SyncStorageBoxAMI"}
    KeyName: {"Ref": "AWSBoxDeployKey"}
    SecurityGroups:
      - {"Ref": "StorageSecurityGroup"}
    Tags:
      - Key: "Name"
        Value: "fxa-syncstorage"
      - Key: "Type"
        Value: "syncstorage"
      - Key: "App"
        Value: "fxa"
      - Key: "Env"
        Value: "dev"
      - Key: "Owner"
        Value: "rfkelly"
      - Key: "Stack"
        Value: {"Ref": "AWS::StackName"}
    UserData: {"Fn::Base64": {"Fn::Join": ["", [
      "#!/bin/bash\n",
      "set -e -x\n",
      # Execute local startup after cloudinit has run.
      "mv /etc/rc.local.post-cloudinit /etc/rc.local\n",
      "exec /etc/rc.local\n",
       ]]}}

SyncServer2:
  Type: AWS::EC2::Instance
  Properties:
    InstanceType: m1.small
    ImageId: {"Ref": "SyncStorageBoxAMI"}
    KeyName: {"Ref": "AWSBoxDeployKey"}
    SecurityGroups:
      - {"Ref": "StorageSecurityGroup"}
    Tags:
      - Key: "Name"
        Value: "fxa-syncstorage"
      - Key: "Type"
        Value: "syncstorage"
      - Key: "App"
        Value: "fxa"
      - Key: "Env"
        Value: "dev"
      - Key: "Owner"
        Value: "rfkelly"
      - Key: "Stack"
        Value: {"Ref": "AWS::StackName"}
    UserData: {"Fn::Base64": {"Fn::Join": ["", [
      "#!/bin/bash\n",
      "set -e -x\n",
      # Change the token-signing secret used by this box.
      "perl -pi -e 's/SECRETKEYOHSECRETKEY/SECRETLYMYSECRETKEY/g' /home/app/server-syncstorage/production.ini\n",
      # Execute local startup after cloudinit has run.
      "mv /etc/rc.local.post-cloudinit /etc/rc.local\n",
      "exec /etc/rc.local\n",
       ]]}}


StorageSecurityGroup:
  Type: AWS::EC2::SecurityGroup
  Properties:
    GroupDescription:  awsboxen security group for picl-oldsync storage
    SecurityGroupIngress:
      # Allow ssh from anywhere
      - IpProtocol: "tcp"
        FromPort: "22"
        ToPort: "22"
        CidrIp: "0.0.0.0/0"
      # Allow http access from anywhere
      - IpProtocol: "tcp"
        FromPort: "443"
        ToPort: "443"
        CidrIp: "0.0.0.0/0"
